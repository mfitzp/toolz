# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libmercury
import new
new_instancemethod = new.instancemethod
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class PySwigIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _libmercury.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return apply(_libmercury.PySwigIterator_value, args)
    def incr(*args): return apply(_libmercury.PySwigIterator_incr, args)
    def decr(*args): return apply(_libmercury.PySwigIterator_decr, args)
    def distance(*args): return apply(_libmercury.PySwigIterator_distance, args)
    def equal(*args): return apply(_libmercury.PySwigIterator_equal, args)
    def copy(*args): return apply(_libmercury.PySwigIterator_copy, args)
    def next(*args): return apply(_libmercury.PySwigIterator_next, args)
    def previous(*args): return apply(_libmercury.PySwigIterator_previous, args)
    def advance(*args): return apply(_libmercury.PySwigIterator_advance, args)
    def __eq__(*args): return apply(_libmercury.PySwigIterator___eq__, args)
    def __ne__(*args): return apply(_libmercury.PySwigIterator___ne__, args)
    def __iadd__(*args): return apply(_libmercury.PySwigIterator___iadd__, args)
    def __isub__(*args): return apply(_libmercury.PySwigIterator___isub__, args)
    def __add__(*args): return apply(_libmercury.PySwigIterator___add__, args)
    def __sub__(*args): return apply(_libmercury.PySwigIterator___sub__, args)
    def __iter__(self): return self
PySwigIterator_swigregister = _libmercury.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class IntVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_libmercury.IntVector_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_libmercury.IntVector___nonzero__, args)
    def __len__(*args): return apply(_libmercury.IntVector___len__, args)
    def pop(*args): return apply(_libmercury.IntVector_pop, args)
    def __getslice__(*args): return apply(_libmercury.IntVector___getslice__, args)
    def __setslice__(*args): return apply(_libmercury.IntVector___setslice__, args)
    def __delslice__(*args): return apply(_libmercury.IntVector___delslice__, args)
    def __delitem__(*args): return apply(_libmercury.IntVector___delitem__, args)
    def __getitem__(*args): return apply(_libmercury.IntVector___getitem__, args)
    def __setitem__(*args): return apply(_libmercury.IntVector___setitem__, args)
    def append(*args): return apply(_libmercury.IntVector_append, args)
    def empty(*args): return apply(_libmercury.IntVector_empty, args)
    def size(*args): return apply(_libmercury.IntVector_size, args)
    def clear(*args): return apply(_libmercury.IntVector_clear, args)
    def swap(*args): return apply(_libmercury.IntVector_swap, args)
    def get_allocator(*args): return apply(_libmercury.IntVector_get_allocator, args)
    def begin(*args): return apply(_libmercury.IntVector_begin, args)
    def end(*args): return apply(_libmercury.IntVector_end, args)
    def rbegin(*args): return apply(_libmercury.IntVector_rbegin, args)
    def rend(*args): return apply(_libmercury.IntVector_rend, args)
    def pop_back(*args): return apply(_libmercury.IntVector_pop_back, args)
    def erase(*args): return apply(_libmercury.IntVector_erase, args)
    def __init__(self, *args): 
        this = apply(_libmercury.new_IntVector, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_libmercury.IntVector_push_back, args)
    def front(*args): return apply(_libmercury.IntVector_front, args)
    def back(*args): return apply(_libmercury.IntVector_back, args)
    def assign(*args): return apply(_libmercury.IntVector_assign, args)
    def resize(*args): return apply(_libmercury.IntVector_resize, args)
    def insert(*args): return apply(_libmercury.IntVector_insert, args)
    def reserve(*args): return apply(_libmercury.IntVector_reserve, args)
    def capacity(*args): return apply(_libmercury.IntVector_capacity, args)
    __swig_destroy__ = _libmercury.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _libmercury.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_libmercury.DoubleVector_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_libmercury.DoubleVector___nonzero__, args)
    def __len__(*args): return apply(_libmercury.DoubleVector___len__, args)
    def pop(*args): return apply(_libmercury.DoubleVector_pop, args)
    def __getslice__(*args): return apply(_libmercury.DoubleVector___getslice__, args)
    def __setslice__(*args): return apply(_libmercury.DoubleVector___setslice__, args)
    def __delslice__(*args): return apply(_libmercury.DoubleVector___delslice__, args)
    def __delitem__(*args): return apply(_libmercury.DoubleVector___delitem__, args)
    def __getitem__(*args): return apply(_libmercury.DoubleVector___getitem__, args)
    def __setitem__(*args): return apply(_libmercury.DoubleVector___setitem__, args)
    def append(*args): return apply(_libmercury.DoubleVector_append, args)
    def empty(*args): return apply(_libmercury.DoubleVector_empty, args)
    def size(*args): return apply(_libmercury.DoubleVector_size, args)
    def clear(*args): return apply(_libmercury.DoubleVector_clear, args)
    def swap(*args): return apply(_libmercury.DoubleVector_swap, args)
    def get_allocator(*args): return apply(_libmercury.DoubleVector_get_allocator, args)
    def begin(*args): return apply(_libmercury.DoubleVector_begin, args)
    def end(*args): return apply(_libmercury.DoubleVector_end, args)
    def rbegin(*args): return apply(_libmercury.DoubleVector_rbegin, args)
    def rend(*args): return apply(_libmercury.DoubleVector_rend, args)
    def pop_back(*args): return apply(_libmercury.DoubleVector_pop_back, args)
    def erase(*args): return apply(_libmercury.DoubleVector_erase, args)
    def __init__(self, *args): 
        this = apply(_libmercury.new_DoubleVector, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_libmercury.DoubleVector_push_back, args)
    def front(*args): return apply(_libmercury.DoubleVector_front, args)
    def back(*args): return apply(_libmercury.DoubleVector_back, args)
    def assign(*args): return apply(_libmercury.DoubleVector_assign, args)
    def resize(*args): return apply(_libmercury.DoubleVector_resize, args)
    def insert(*args): return apply(_libmercury.DoubleVector_insert, args)
    def reserve(*args): return apply(_libmercury.DoubleVector_reserve, args)
    def capacity(*args): return apply(_libmercury.DoubleVector_capacity, args)
    __swig_destroy__ = _libmercury.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _libmercury.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class UnsignedIntVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_libmercury.UnsignedIntVector_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_libmercury.UnsignedIntVector___nonzero__, args)
    def __len__(*args): return apply(_libmercury.UnsignedIntVector___len__, args)
    def pop(*args): return apply(_libmercury.UnsignedIntVector_pop, args)
    def __getslice__(*args): return apply(_libmercury.UnsignedIntVector___getslice__, args)
    def __setslice__(*args): return apply(_libmercury.UnsignedIntVector___setslice__, args)
    def __delslice__(*args): return apply(_libmercury.UnsignedIntVector___delslice__, args)
    def __delitem__(*args): return apply(_libmercury.UnsignedIntVector___delitem__, args)
    def __getitem__(*args): return apply(_libmercury.UnsignedIntVector___getitem__, args)
    def __setitem__(*args): return apply(_libmercury.UnsignedIntVector___setitem__, args)
    def append(*args): return apply(_libmercury.UnsignedIntVector_append, args)
    def empty(*args): return apply(_libmercury.UnsignedIntVector_empty, args)
    def size(*args): return apply(_libmercury.UnsignedIntVector_size, args)
    def clear(*args): return apply(_libmercury.UnsignedIntVector_clear, args)
    def swap(*args): return apply(_libmercury.UnsignedIntVector_swap, args)
    def get_allocator(*args): return apply(_libmercury.UnsignedIntVector_get_allocator, args)
    def begin(*args): return apply(_libmercury.UnsignedIntVector_begin, args)
    def end(*args): return apply(_libmercury.UnsignedIntVector_end, args)
    def rbegin(*args): return apply(_libmercury.UnsignedIntVector_rbegin, args)
    def rend(*args): return apply(_libmercury.UnsignedIntVector_rend, args)
    def pop_back(*args): return apply(_libmercury.UnsignedIntVector_pop_back, args)
    def erase(*args): return apply(_libmercury.UnsignedIntVector_erase, args)
    def __init__(self, *args): 
        this = apply(_libmercury.new_UnsignedIntVector, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_libmercury.UnsignedIntVector_push_back, args)
    def front(*args): return apply(_libmercury.UnsignedIntVector_front, args)
    def back(*args): return apply(_libmercury.UnsignedIntVector_back, args)
    def assign(*args): return apply(_libmercury.UnsignedIntVector_assign, args)
    def resize(*args): return apply(_libmercury.UnsignedIntVector_resize, args)
    def insert(*args): return apply(_libmercury.UnsignedIntVector_insert, args)
    def reserve(*args): return apply(_libmercury.UnsignedIntVector_reserve, args)
    def capacity(*args): return apply(_libmercury.UnsignedIntVector_capacity, args)
    __swig_destroy__ = _libmercury.delete_UnsignedIntVector
    __del__ = lambda self : None;
UnsignedIntVector_swigregister = _libmercury.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

mercury = _libmercury.mercury


